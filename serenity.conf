#! /bin/bash
# serenity.conf
# Serenity configuration file

# Serenity performs the following steps in order to guess a good filename:
#   - Global preprocessing: the whole input filename is processed through a filter chain,
#   - Tokenization: the preprocessed filename is matched against a series of tokenization patterns
#                   in order to extract the relevant information (show, season, episode number...),
#   - Token preprocessing: the extracted tokens are processed through a filter chain. Different
#                          filter chains can be affected to different token types,
#   - Splitting: split the tokens in a per episode basis and try to interpolate the missing values.
#                For each episode found during the splitting step, the following step is performed:
#     - Token refining: using the preprocessed tokens, a data source is queried in order to
#                       retreive the correct values of the tokens (e. g. the exact name of the show)
#                       and fill in the blanks (episode title, country of origin...),
#   - Token postprocessing: the refined tokens are processed through a filter chain. Different
#                           filter chains can be affected to different token types,
#   - Aggregation: the tokens of the episodes found are aggregated to form a coherent set,
#   - Formatting: a formatter is called in order to generate the output filename based on the set of
#                 tokens,
#   - Global postprocessing: the whole output filename is processed through a filter chain.

# Filter chains
# =============
# Filter chains are series of filters that may be used during the various processing steps.
# A filter can be any command or bash function that takes the data to be filtered from stdin
# and outputs the filtered data to stdout.
# Filter chains are functions whose name must begin with "serenity.conf.chains.".
# You can set as many filter chains as you want.
# Inside these functions, use `serenity.pipeline- filter` to add a filter to the chain.
# The `serenity.debug.trace` is an optional special filter that wraps the real filter in order
# to produce a more useful debugging output.

# The globalPreprocessing chain is intended to be used during the global preprocessing step.
serenity.conf.chains.globalPreprocessing() {
  # Run the serenity provided urlDecode filter to decode sequences like %20 from the filename.
  serenity.pipeline- serenity.debug.trace serenity.filters.urlDecode
  # Apply a series of sed expressions:
  #   - remove the aaf- and tpz- prefixes,
  #   - try removing urls in .com, .net, .org., .info,
  #   - replace [, ], _ and . by spaces,
  #   - expand various common abreviations.
  serenity.pipeline- serenity.debug.trace sed -r                 \
    -e "s/episode/e/I"                                              \
    -e "s/^((aaf)|(tpz))-//I"                                       \
    -e "s/^((.+\.com)|(.+\.net)|(.+\.org)|(.+\.info))\b(.+\.)/\6/I" \
    -e "s/[[_]/ /g;s/\]/ /g"                                        \
    -e "s/tbbt/The Big Bang Theory/I"                               \
    -e "s/\bw13\b/warehouse 13/I"                                   \
    -e "s/swtcw/Star Wars The Clone Wars/I"                         \
    -e "s/tsja/The Sarah Jane Adventures/I"                         \
    -e "s/sttas/Star Trek The Animated Series/I"                    \
    -e "s/^TNG/Star Trek The Next Generation /I"                    \
    -e "s/^CK/Chuck/I"                                              \
    -e "s/DS9/Deep Space Nine/I"                                    \
    -e "s/seven days/7 Days/I"                                      \
    -e "s/doctor.who.classic/doctor who/I"                          \
    -e "s/(1963)//I"                                                \
    -e "s/D\.H\.H\./desperate housewives /I"                        \
    -e "s/Otchayannie.domochozyaiki/desperate housewives/I"         \
    -e "s/\bSG\b/Stargate/I"
}

# The numbersPreprocessing chain is intended to be used during the token preprocessing step on
# numerical tokens such as 'season' or 'episode'.
serenity.conf.chains.numbersPreprocessing() {
  # Convert roman numerals (e. g. IX, vi) to arabic numerals (e. g. 9, 6)
  # NOTE: currently untested
  serenity.pipeline- serenity.debug.trace serenity.filters.romanToArabic
  serenity.pipeline- serenity.debug.trace serenity.filters.englishToArabic
  # Strip the leading zeroes (do not remove)
  serenity.pipeline- serenity.debug.trace serenity.filters.lstrip "0"
}

serenity.conf.chains.showPostprocessing() {
  case "$(serenity.tokens.get show)" in
    "Hawaii Five-0")      serenity.pipeline- echo -n "Hawaii Five-0 (2010)" ;;
    "Revolution (2012)")  serenity.pipeline- echo -n "Revolution" ;;
  esac
  serenity.conf.chains.defaultPostprocessing
}

# The defaultPostprocessing chain is intended to be used during the token postprocessing step as the
# dafault chain.
serenity.conf.chains.defaultPostprocessing() {
  # Capitalize the first letter of each word unless the country of origin is France.
  # The standard bash if construct is used to provide conditional filtering
  # `serenity.tokens.get tokenType` retreives the value of a token and is only available when the
  # chain is used during the *token* pre- and post- processing steps.
  if ! [[ "$(serenity.tokens.get country)" =~ [Ff][Rr][Aa][Nn][Cc][Ee] ]]; then
    serenity.pipeline- serenity.debug.trace sed -r          \
      -e "s/\b(.)/\U\1/g;s/(['’])(.)/\1\l\2/g"
  fi
  # Apply a series of sed expressions:
  #   - replace / and \ by - (always get rid of / and \ in the resulting filename),
  #   - replace ’ by ',
  #   - replace spaces by _.
  serenity.pipeline- serenity.debug.trace sed -r                 \
    -e 's/[/\]/-/g'                                                 \
    -e "s/’/'/g"                                                    \
    -e 's/ /_/g'

  serenity.pipeline- serenity.filters.lstrip "_"
}

serenity.conf.chains.noDots() {
  serenity.pipeline- tr "." " "
}

# Global preprocessing
# ====================
# The whole input filename is processed through a filter chain in order to ease the tokenization and
# refining steps.

# serenity_conf_globalPreprocessing
# Type: string
# Value: name of the filter chain to use in the global preprocessing step or '' for no processing
serenity_conf_globalPreprocessing=globalPreprocessing

# Tokenization
# ============
# The preprocessed filename is matched against a series of tokenization patterns in order to extract
# the relevant information (show, season, episode number...). Each piece of information is called a
# token.
# Well-known token types are:
#   - show: show name (e. g.: Battlestar Galactica)
#   - season: season number (e. g.: 4)
#   - episode: episode number (e. g.: 19)
#   - title: episode title number (e. g.: Daybreak (1))
#   - first_episode: first episode number in a range
#   - last_episode: last episode number in a range
# Multiple consecutive episodes in the same file form a range of episodes.
# If there are multiple episodes, you can prefix the tokens with 1::, 2::, 3::... to distinguish
# the tokens of each episode.
# Multiple tokenizers can be set to test different patterns.
# The first that will succeed will be used.

# serenity_conf_tokenDefaults
# Type: associative array
# Keys: token types or 'default'
# Values: default value for a given token type if it's value cannot be extracted from the filename.
serenity_conf_tokenDefaults=(['default']=''
                             ['season']='1'
                             ['episode']='1')

# serenity.conf.addTokenizer
# Type: function
# Parameters: tokenizer intance to add to the list of the available tokenizers.

# For now, reMatch is the only tokenizer available and uses Bash built-in regular expressions to
# extract the tokens.
# Usage: reMatch regular_expression token_type [...]

# Match battlestar.galactica.s04e19-20.mkv
# Where:
#   show='battlestar.galactica'
#   season='04'
#   first_episode='19'
#   last_episode='20'
#   title=''
# Interpreted by 'range' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ][Ss]([0-9]+)[Ee]([0-9]+)\s*-[Ee]*([0-9]+)(.*)$'  \
                                    'show' 'season' 'first_episode' 'last_episode' 'title'

# Match battlestar.galactica.04x19-20.mkv
# Where:
#   show='battlestar.galactica'
#   season='04'
#   first_episode='19'
#   last_episode='20'
#   title=''
# Interpreted by 'range' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ]([0-9]+)[Xx]([0-9]+)-([0-9]+)(.*)$'  \
                                    'show' 'season' 'first_episode' 'last_episode' 'title'

# Match battlestar.galactica.s04e19e20.mkv
# Where:
#   show='battlestar.galactica'
#   season='04'
#   1::episode='19'
#   2::episode='20'
#   title=''
# Interpreted by 'multi' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ][Ss]([0-9]+)[Ee]([0-9]+)[Ee]([0-9]+)(.*)$'  \
                                    'show' 'season' '1::episode' '2::episode' 'title'

# Match battlestar.galactica.04x19.daybreak.1.04x20.daybreak.2.mkv
# Where:
#   show='battlestar.galactica'
#   1::season='04'
#   1::episode='19'
#   1::title='.daybreak.1'
#   2::season='04'
#   2::episode='20'
#   2::title='.daybreak.2'
# Interpreted by 'multi' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ]([0-9]+)[Xx]([0-9]+)(.*)[-_. ]([0-9]+)[Xx]([0-9]+)(.*)$'  \
                                    'show' '1::season' '1::episode' '1::title' '2::season' '2::episode' '2::title'

# Match battlestar.galactica.s04e19.mkv
# Where:
#   show='battlestar.galactica'
#   season='04'
#   episode='19'
#   title=''
# Interpreted by 'single' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ][Ss]([0-9]+)[ -_]*[Ee][Pp -_]*([0-9]+)(.*)$'  \
                                    'show' 'season' 'episode' 'title'

# Match battlestar.galactica.04x19.mkv
# Where:
#   show='battlestar.galactica'
#   season='04'
#   episode='19'
#   title=''
# Interpreted by 'single' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ]([0-9]+)[Xx]([0-9]+)(.*)$'      \
                                    'show' 'season' 'episode' 'title'

# Match battlestar.galactica.4.ep19.mkv
# (Assume episode number is 2 character long)
# Where:
#   show='battlestar.galactica'
#   season='4'
#   episode='19'
#   title=''
# Interpreted by 'single' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ]([0-9]+)[-_. ]?[Ee][Pp]([0-9]+)(.*)$' \
                                    'show' 'season' 'episode' 'title'
# Match battlestar.galactica.2.sezon.19.mkv
# (Assume episode number is 2 character long)
# Where:
#   show='battlestar.galactica'
#   season='4'
#   episode='19'
#   title=''
# Interpreted by 'single' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ][(]?([0-9]+)[-_. ]?[Ss][Ee][Zz][Oo][Nn][-_. ]?([0-9]+)(.*)$' \
                                    'show' 'season' 'episode' 'title'

# Match battlestar.galactica.part.one.mkv
# Where:
#   show='battlestar.galactica'
#   episode='one'
#   title=''
# Interpreted by 'single' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ][Pp][Aa][Rr][Tt][-_. ]([A-Za-z0-9]+)(.*)$' \
                                    'show' 'episode' 'title'


# Match battlestar.galactica.419.mkv
# (Assume episode number is 2 character long)
# Where:
#   show='battlestar.galactica'
#   season='4'
#   episode='19'
#   title=''
# Interpreted by 'single' splitter
serenity.conf.addTokenizer reMatch  '^(.+)[-_. ]([0-9]+)([0-9]{2})(.*)$'        \
                                    'show' 'season' 'episode' 'title'

# Token preprocessing
# ===================
serenity_conf_tokenPreprocessing=(['default']=''
                                  ['season']='numbersPreprocessing'
                                  ['episode']='numbersPreprocessing'
                                  ['first_episode']='numbersPreprocessing'
                                  ['last_episode']='numbersPreprocessing'
                                  ['show']='noDots')

# Splitter priorities
# ===================
serenity_conf_splitterPriorities=(range multi single)

# Token refining
# ==============
serenity_conf_datasources=('csv' 'thetvdb' 'tvrage' 'dummy')

# Aggregator priorities
# =====================
serenity_conf_aggregatorPriorities=(single multi)

# Token postprocessing
# ====================
serenity_conf_tokenPostprocessing=(['default']='defaultPostprocessing'
                                   ['show']='showPostprocessing')

# Formatting
# ==========

# Carnivale_02x03_Ingram,_TX.avi
serenity_conf_formatting=(mprintf -f "%s_%02dx%02d-%02d_%s%s"           'common::show' 'common::season' 'first_episode' 'last_episode' 'common::title' '_::extension'
                                  -f "%s_%02dx%02d_%s_%02dx%02d_%s%s"   'common::show' '1::season' '1::episode' '1::title' '2::season' '2::episode' '2::title' '_::extension'
                                  -f "%s_%02dx%02d_%s%s"                'show' 'season' 'episode' 'title' '_::extension'
                                  -f "%s_%02dx%02d%s"                   'show' 'season' 'episode' '_::extension')

# Global postprocessing
# =====================
serenity_conf_globalPostprocessing=''

# Misc
# ====
# serenity_conf_verbosity: minimal verbosity level. Valid verbosity level are:
#   - $serenity_debug_quiet: show nothing,
#   - $serenity_debug_critical: show only critical errors,
#   - $serenity_debug_error: show all errors,
#   - $serenity_debug_warning: show warnings and errors,
#   - $serenity_debug_info: show information, warnings and errors,
#   - $serenity_debug_debug: show debugging messages too.
serenity_conf_verbosity=$serenity_debug_debug

# serenity_conf_tracing: enable tracing (yes/no)
# Tracing is used only for debugging purposes and can slow down the program.
serenity_conf_tracing='no'

# serenity_conf_keepExtension: keeping file extensions (yes/no)
serenity_conf_keepExtension='yes'

# serenity_conf_multipartStripList: regular expressions that will be stripped from the end of the
# title to get the common episode title of a multipart episode.
serenity_conf_multipartStripList=("(_+)$" "(\s+)$" "(,)$" "([Pp][Aa][Rr][Tt])$" "(/)$"
                                  "([0-9]+)$" "\b($serenity_filters_romanNumeralRE+)$"
                                  "([0-9]+\))$" "\b($serenity_filters_romanNumeralRE+\))$"
                                  "([0-9]+/[0-9]+\))$" "([0-9]+ [Oo][Ff] [0-9]+\))$" "(\()")

# Data source specific configuration
# ==================================

# CSV data source
# -----------
# The CSV data source is used to override the result of other data sources.
# It is useful when a specific show can not be found online.
# Titles are put in a CSV file.

serenity_conf_datasource_csv_file='serenity.csv'
serenity_conf_datasource_csv_separator=';'
serenity_conf_datasource_csv_format=('show' 'season' 'episode' 'title')
